Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 1
lib.asm



      1	0000			     .model tiny
      2
      3				     ;	 Machine constants
      4
      5	      =B800		     VIDEO_MEM = 0b800h
      6	      =0050		     CONS_WIDTH	= 80
      7
      8	0000			     .code
      9
     10				     public printf
     11				     public putDec
     12				     public putBin
     13				     public putHex
     14
     15				     ;HHH=================================================HHH
     16				     ;HHH						  HHH
     17				     ;HHH		    printf			  HHH
     18				     ;HHH - formatted string printing			  HHH
     19				     ;HHH						  HHH
     20				     ;HHH   INPUT: stack: > format (the	format string)	  HHH
     21				     ;HHH		    ...	   (arguments)		  HHH
     22				     ;HHH	   AH	 (color)			  HHH
     23				     ;HHH	   ES:DI (current position)		  HHH
     24				     ;HHH  OUTPUT: --					  HHH
     25				     ;HHH DESTROY: AX, BX, CX, DX			  HHH
     26				     ;HHH	   DI, SI				  HHH
     27				     ;HHH						  HHH
     28				     ;HHH=================================================HHH
     29
     30	0000			     printf proc
     31	0000  55			 push bp
     32	0001  8B EC			 mov bp, sp
     33
     34					 ; ah -	text color
     35					 ; al -	current	char from format
     36					 ; bh -	color (save)
     37
     38	0003  56			 push si
     39
     40					 ; si -> format	= [bp +	4]
     41	0004  8B 76 04			 mov si, [bp + 4]
     42	0007  83 C5 06			     add bp, 6
     43					 ; now we are to add 2 to bp every time	we get next argument
     44
     45					 ; color (save)
     46	000A  8A FC			 mov bh, ah
     47
     48	000C  FC			 cld
     49
     50	000D			     printf_next_char:
     51					 ; getting next	char
     52	000D  AC			 lodsb
     53
     54					 ; char	== 0 <=> EOL
     55	000E  3C 00			 cmp al, 0
     56	0010  74 60			 je printf_longjmp_end
     57
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 2
lib.asm



     58					 ; char	== \ <=> special symbol
     59	0012  3C 5C			 cmp al, '\'
     60	0014  75 50			 jne printf_not_specsym
     61					     ; getting the special symbol
     62	0016  AC			     lodsb
     63
     64	0017  3C 30			     cmp al, '0'
     65	0019  75 05			     jne printf_not_zero
     66	001B  B0 00				 mov al, 0
     67	001D  EB 53 90				 jmp printf_longjmp_end
     68	0020				 printf_not_zero:
     69
     70	0020  3C 5C			     cmp al, '\'
     71	0022  75 07			     jne printf_not_rslash
     72	0024  B0 5C				 mov al, '\'
     73	0026  8A E7				 mov ah, bh
     74	0028  AB				 stosw
     75	0029  EB E2				 jmp printf_next_char
     76	002B				 printf_not_rslash:
     77
     78	002B  3C 6E			     cmp al, 'n'
     79	002D  75 11			     jne printf_not_newline
     80	002F  53				 push bx
     81
     82	0030  BB 0000				 mov bx, 0
     83	0033				     printf_newline_loop:
     84	0033  81 C3 00A0			 add bx, CONS_WIDTH * 2
     85	0037  3B FB				 cmp di, bx
     86	0039  73 F8				 jnb printf_newline_loop
     87
     88	003B  8B FB				 mov di, bx
     89
     90	003D  5B				 pop bx
     91	003E  EB CD				 jmp printf_next_char
     92	0040				 printf_not_newline:
     93
     94	0040  3C 62			     cmp al, 'b'
     95	0042  75 0A			     jne printf_not_bkspace
     96	0044  83 FF 00				 cmp di, 0
     97	0047  74 C4				 je printf_next_char
     98	0049  83 EF 02				 sub di, 2
     99	004C  EB BF				 jmp printf_next_char
    100	004E				 printf_not_bkspace:
    101
    102	004E  53			     push bx
    103
    104	004F  50			     push ax
    105	0050  50 55 8B EC C7 46	02+	     push offset printf_err_specsym
    106	      0025r 5D
    107	005A  B4 04			     mov ah, 04h
    108	005C  E8 FFA1			     call printf
    109	005F  83 C4 04			     add sp, 2 * 2
    110
    111	0062  5B			     pop bx
    112
    113	0063  EB 0D 90			     jmp printf_longjmp_end
    114
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 3
lib.asm



    115	0066			     printf_not_specsym:
    116
    117					 ; char	== % <=> special parameter output
    118	0066  3C 25			 cmp al, '%'
    119	0068  74 0B			 je printf_spec
    120					     ; simple char output
    121	006A  8A E7			     mov ah, bh
    122	006C  AB			     stosw
    123	006D  EB 9E			     jmp printf_next_char
    124
    125
    126	006F  EB 04 90			 jmp printf_shortjmp
    127	0072			     printf_longjmp_end:
    128	0072  E9 008D			 jmp printf_end
    129	0075			     printf_shortjmp:
    130
    131
    132	0075			     printf_spec:
    133					 ; getting the parameter's type
    134	0075  AC			 lodsb
    135
    136					 ; char	== % <=> %
    137	0076  3C 25			 cmp al, '%'
    138	0078  75 05			 jne printf_not_percent
    139	007A  8A E7			     mov ah, bh
    140	007C  AB			     stosw
    141	007D  EB 8E			     jmp printf_next_char
    142	007F			     printf_not_percent:
    143
    144					 ; char	== d <=> decimal number
    145	007F  3C 64			 cmp al, 'd'
    146	0081  75 14			 jne printf_not_dec
    147	0083  53			     push bx
    148
    149	0084  8B 46 00			     mov ax, [bp]
    150	0087  83 C5 02				 add bp, 2
    151	008A  50			     push ax
    152	008B  8A E7			     mov ah, bh
    153	008D  E8 0075			     call putDec
    154	0090  83 C4 02			     add sp, 2 * 1
    155
    156	0093  5B			     pop bx
    157	0094  E9 FF76			     jmp printf_next_char
    158	0097			     printf_not_dec:
    159
    160					 ; char	== b <=> binary	number
    161	0097  3C 62			 cmp al, 'b'
    162	0099  75 14			 jne printf_not_bin
    163	009B  53			     push bx
    164
    165	009C  8B 46 00			     mov ax, [bp]
    166	009F  83 C5 02				 add bp, 2
    167	00A2  50			     push ax
    168	00A3  8A E7			     mov ah, bh
    169	00A5  E8 0087			     call putBin
    170	00A8  83 C4 02			     add sp, 2 * 1
    171
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 4
lib.asm



    172	00AB  5B			     pop bx
    173	00AC  E9 FF5E			     jmp printf_next_char
    174	00AF			     printf_not_bin:
    175
    176					 ; char	== x <=> hex number
    177	00AF  3C 78			 cmp al, 'x'
    178	00B1  75 14			 jne printf_not_hex
    179	00B3  53			     push bx
    180	00B4  8B 46 00			     mov ax, [bp]
    181	00B7  83 C5 02				 add bp, 2
    182	00BA  50			     push ax
    183	00BB  8A E7			     mov ah, bh
    184	00BD  E8 0096			     call putHex
    185	00C0  83 C4 02			     add sp, 2 * 1
    186
    187	00C3  5B			     pop bx
    188	00C4  E9 FF46			     jmp printf_next_char
    189	00C7			     printf_not_hex:
    190
    191					 ; char	== c <=> char parameter
    192	00C7  3C 63			 cmp al, 'c'
    193	00C9  75 0C			 jne printf_not_char
    194	00CB  8B 46 00			     mov ax, [bp]
    195	00CE  83 C5 02				 add bp, 2
    196	00D1  8A E7			     mov ah, bh
    197	00D3  AB			     stosw
    198
    199	00D4  E9 FF36			     jmp printf_next_char
    200	00D7			     printf_not_char:
    201
    202					 ; char	== s <=> string	parameter
    203	00D7  3C 73			 cmp al, 's'
    204	00D9  75 12			 jne printf_not_str
    205	00DB  8B 46 00			     mov ax, [bp]
    206	00DE  83 C5 02				 add bp, 2
    207	00E1  50			     push ax	 ; 1
    208	00E2  8A E7			     mov ah, bh	 ; color
    209	00E4  E8 FF19			     call printf
    210	00E7  83 C4 02			     add sp, 2 * 1
    211	00EA  E9 FF20			     jmp printf_next_char
    212	00ED			     printf_not_str:
    213
    214	00ED  53			 push bx
    215
    216	00EE  50			 push ax
    217	00EF  50 55 8B EC C7 46	02+	 push offset printf_err_formattype
    218	      0000r 5D
    219	00F9  B4 04			 mov ah, 04h
    220	00FB  E8 FF02			 call printf
    221	00FE  83 C4 04			 add sp, 2 * 2
    222
    223	0101  5B			 pop bx
    224
    225	0102			     printf_end:
    226
    227	0102  5E			 pop si
    228
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 5
lib.asm



    229	0103  5D			 pop bp
    230	0104  C3			 ret
    231	0105				 endp
    232
    233				     ;HHH=================================================HHH
    234				     ;HHH						  HHH
    235				     ;HHH		    putDec			  HHH
    236				     ;HHH - print a number as decimal			  HHH
    237				     ;HHH						  HHH
    238				     ;HHH   INPUT: stack: > num	 (the number to	print)	  HHH
    239				     ;HHH	   AH	 (color)			  HHH
    240				     ;HHH	   ES:DI (current position)		  HHH
    241				     ;HHH  OUTPUT: --					  HHH
    242				     ;HHH DESTROY: AX, BX, CX, DX			  HHH
    243				     ;HHH	   DI					  HHH
    244				     ;HHH						  HHH
    245				     ;HHH=================================================HHH
    246
    247	0105			     putDec proc
    248	0105  55			 push bp
    249	0106  8B EC			 mov bp, sp
    250
    251					 ; num = [bp + 4]
    252
    253					 ;---------------------------------------------
    254
    255					 ; ax -	current	num
    256					 ; bh -	color
    257					 ; bl -	current	digit
    258					 ; bx -	$10 (for division)
    259					 ; ch -	color
    260					 ; cl -	#digits	<=> current displacement
    261					 ; dx (dl actually) - remain (from division)
    262
    263					 ; color
    264	0108  8A EC			 mov ch, ah
    265
    266					 ; displacement
    267	010A  B1 00			 mov cl, 0
    268
    269					 ; ax =	num
    270	010C  8B 46 04			 mov ax, [bp + 4]
    271
    272	010F			     putDec_step:
    273					 ; ax -> ax*10 + dx, dx<10 => dx <=> dl
    274					 ;	    =bx
    275	010F  BA 0000			 mov dx, 0
    276	0112  BB 000A			 mov bx, 10
    277	0115  F7 F3			 div bx
    278
    279					 ; bl =	dl (remain)
    280	0117  8A DA			 mov bl, dl
    281
    282					 ; converting bx to char
    283	0119  80 C3 30			 add bl, '0'
    284	011C  8A FD			 mov bh, ch
    285	011E  53			 push bx
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 6
lib.asm



    286
    287					 ; ++displacement
    288	011F  FE C1			 inc cl
    289
    290	0121  3D 0000			 cmp ax, 0
    291	0124  75 E9			 jne putDec_step
    292
    293					 ; cl => cx
    294	0126  B5 00			 mov ch, 0
    295
    296	0128  FC			 cld
    297
    298	0129			     putDec_loop:
    299	0129  58			 pop ax
    300	012A  AB			 stosw
    301	012B  E2 FC			 loop putDec_loop
    302
    303	012D  5D			 pop bp
    304	012E  C3			 ret
    305	012F				 endp
    306
    307				     ;HHH=================================================HHH
    308				     ;HHH						  HHH
    309				     ;HHH		    putBin			  HHH
    310				     ;HHH - print a number as binary			  HHH
    311				     ;HHH						  HHH
    312				     ;HHH   INPUT: stack: > num	 (the number to	print)	  HHH
    313				     ;HHH	   AH	 (color)			  HHH
    314				     ;HHH	   ES:DI (current position)		  HHH
    315				     ;HHH  OUTPUT: --					  HHH
    316				     ;HHH DESTROY: AX, CX				  HHH
    317				     ;HHH	   DI					  HHH
    318				     ;HHH						  HHH
    319				     ;HHH=================================================HHH
    320
    321	012F			     putBin proc
    322	012F  55			 push bp
    323	0130  8B EC			 mov bp, sp
    324
    325					 ; num = [bp + 4]
    326
    327					 ;---------------------------------------------
    328
    329					 ; ax -	current	num
    330					 ; ch -	text color
    331					 ; cl -	#digits	<=> current displacement
    332
    333					 ; color
    334	0132  8A EC			 mov ch, ah
    335
    336					 ; displacement
    337	0134  B1 00			 mov cl, 0
    338
    339					 ; num
    340	0136  8B 46 04			 mov ax, [bp + 4]
    341
    342	0139			     putBin_step:
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 7
lib.asm



    343					 ; ax %	2 <=> last bit (mask 0001)
    344	0139  25 0001			 and ax, 0001h
    345
    346					 ; converting to char
    347	013C  04 30			 add al, '0'
    348	013E  8A E5			 mov ah, ch
    349	0140  50			 push ax
    350
    351					 ; ++displacement
    352	0141  FE C1			 inc cl
    353	0143  8B 46 04			 mov ax, [bp + 4]
    354	0146  D3 E8			 shr ax, cl
    355
    356					 ; num == 0 <=>	end
    357	0148  3D 0000			 cmp ax, 0
    358	014B  75 EC			 jne putBin_step
    359
    360					 ; cl => cx
    361	014D  B5 00			 mov ch, 0
    362
    363	014F  FC			 cld
    364
    365	0150			     putBin_loop:
    366	0150  58			 pop ax
    367	0151  AB			 stosw
    368	0152  E2 FC			 loop putBin_loop
    369
    370					 ;---------------------------------------------
    371
    372	0154  5D			 pop bp
    373	0155  C3			 ret
    374	0156				 endp
    375
    376				     ;HHH=================================================HHH
    377				     ;HHH						  HHH
    378				     ;HHH		    putHex			  HHH
    379				     ;HHH - print a number as a	hex number		  HHH
    380				     ;HHH						  HHH
    381				     ;HHH   INPUT: stack: > num	 (the number to	print)	  HHH
    382				     ;HHH	   AH	 (color)			  HHH
    383				     ;HHH	   ES:DI (current position)		  HHH
    384				     ;HHH  OUTPUT: --					  HHH
    385				     ;HHH DESTROY: AX, CX				  HHH
    386				     ;HHH	   DI					  HHH
    387				     ;HHH						  HHH
    388				     ;HHH=================================================HHH
    389
    390	0156			     putHex proc
    391	0156  55			 push bp
    392	0157  8B EC			 mov bp, sp
    393
    394					 ; num = [bp + 4]
    395
    396					 ;---------------------------------------------
    397
    398					 ; ax -	current	num
    399					 ; ch -	text color
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 8
lib.asm



    400					 ; cl -	4*#digits = current displacement
    401
    402					 ;color
    403	0159  8A EC			 mov ch, ah
    404
    405					 ; displacement
    406	015B  B1 00			 mov cl, 0
    407
    408					 ; num
    409	015D  8B 46 04			 mov ax, [bp + 4]
    410
    411	0160			     putHex_step:
    412					 ; ax %	16 <=> last 4 bits (mask 1111 =	F)
    413	0160  25 000F			 and ax, 0Fh
    414
    415					 ; converting to char depends on value:
    416					 ;  0... 9 -> '0'...'9'
    417					 ; 10...15 -> 'A'...'F'
    418	0163  3C 0A			 cmp al, 10
    419	0165  72 02			 jb putHex_isnum
    420	0167  04 07			     add al, 'A' - 10 -	'0'
    421	0169			     putHex_isnum:
    422	0169  04 30			 add al, '0'
    423	016B  8A E5			 mov ah, ch
    424	016D  50			 push ax
    425
    426					 ; displacement	+= 4 bit
    427	016E  80 C1 04			 add cl, 4
    428	0171  8B 46 04			 mov ax, [bp + 4]
    429	0174  D3 E8			 shr ax, cl
    430
    431	0176  3D 0000			 cmp ax, 0
    432	0179  75 E5			 jne putHex_step
    433
    434					 ; cl *	2 => cx
    435					 ; (cl * 2) = #digits /	2 = #bytes to print
    436	017B  D0 E9 D0 E9		 shr cl, 2
    437	017F  B5 00			 mov ch, 0
    438
    439	0181  FC			 cld
    440
    441	0182			     putHex_loop:
    442	0182  58			 pop ax
    443	0183  AB			 stosw
    444	0184  E2 FC			 loop putHex_loop
    445
    446					 ;---------------------------------------------
    447
    448	0186  5D			 pop bp
    449	0187  C3			 ret
    450	0188				 endp
    451
    452				     ;=======================================================
    453
    454	0188			     .data
    455
    456	0000  5B 45 52 52 4F 52	3A+  printf_err_formattype   db	'[ERROR: unknown variable type:	%%%c]',	0
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 9
lib.asm



    457	      20 75 6E 6B 6E 6F	77+
    458	      6E 20 76 61 72 69	61+
    459	      62 6C 65 20 74 79	70+
    460	      65 3A 20 25 25 25	63+
    461	      5D 00
    462	0025  5B 45 52 52 4F 52	3A+  printf_err_specsym	     db	'[ERROR: unknown special symbol: \\%c]', 0
    463	      20 75 6E 6B 6E 6F	77+
    464	      6E 20 73 70 65 63	69+
    465	      61 6C 20 73 79 6D	62+
    466	      6F 6C 3A 20 5C 5C	25+
    467	      63 5D 00
    468
    469				     end
Turbo Assembler	 Version 4.1	    03/02/19 18:54:42	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/19"
??FILENAME			  Text	 "lib	  "
??TIME				  Text	 "18:54:42"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 LIB
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CONS_WIDTH			  Number 0050
PRINTF				  Near	 DGROUP:0000
PRINTF_END			  Near	 DGROUP:0102
PRINTF_ERR_FORMATTYPE		  Byte	 DGROUP:0000
PRINTF_ERR_SPECSYM		  Byte	 DGROUP:0025
PRINTF_LONGJMP_END		  Near	 DGROUP:0072
PRINTF_NEWLINE_LOOP		  Near	 DGROUP:0033
PRINTF_NEXT_CHAR		  Near	 DGROUP:000D
PRINTF_NOT_BIN			  Near	 DGROUP:00AF
PRINTF_NOT_BKSPACE		  Near	 DGROUP:004E
PRINTF_NOT_CHAR			  Near	 DGROUP:00D7
PRINTF_NOT_DEC			  Near	 DGROUP:0097
PRINTF_NOT_HEX			  Near	 DGROUP:00C7
PRINTF_NOT_NEWLINE		  Near	 DGROUP:0040
PRINTF_NOT_PERCENT		  Near	 DGROUP:007F
PRINTF_NOT_RSLASH		  Near	 DGROUP:002B
PRINTF_NOT_SPECSYM		  Near	 DGROUP:0066
PRINTF_NOT_STR			  Near	 DGROUP:00ED
PRINTF_NOT_ZERO			  Near	 DGROUP:0020
PRINTF_SHORTJMP			  Near	 DGROUP:0075
PRINTF_SPEC			  Near	 DGROUP:0075
PUTBIN				  Near	 DGROUP:012F
PUTBIN_LOOP			  Near	 DGROUP:0150
PUTBIN_STEP			  Near	 DGROUP:0139
PUTDEC				  Near	 DGROUP:0105
PUTDEC_LOOP			  Near	 DGROUP:0129
PUTDEC_STEP			  Near	 DGROUP:010F
PUTHEX				  Near	 DGROUP:0156
PUTHEX_ISNUM			  Near	 DGROUP:0169
PUTHEX_LOOP			  Near	 DGROUP:0182
PUTHEX_STEP			  Near	 DGROUP:0160
VIDEO_MEM			  Number B800

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  004B Word	  Public  DATA
  _TEXT				  16  0188 Word	  Public  CODE
